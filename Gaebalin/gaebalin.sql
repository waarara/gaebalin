-- 유저 시퀀스
DROP SEQUENCE USER_SEQ;
CREATE SEQUENCE USER_SEQ;

-- 제품 시퀀스
DROP SEQUENCE PRODUCT_SEQ;
CREATE SEQUENCE PRODUCT_SEQ;

-- 판매 시퀀스
DROP SEQUENCE SELL_SEQ;
CREATE SEQUENCE SELL_SEQ;

-- 장바구니 시퀀스
DROP SEQUENCE CART_SEQ;
CREATE SEQUENCE CART_SEQ;

-- 행사 시퀀스
DROP SEQUENCE EVENT_SEQ;
CREATE SEQUENCE EVENT_SEQ;

-- 예약 시퀀스
DROP SEQUENCE RESERVE_SEQ;
CREATE SEQUENCE RESERVE_SEQ;

-- 고객센터 시퀀스
DROP SEQUENCE QNA_SEQ;
CREATE SEQUENCE QNA_SEQ;

-- 문의사항 그룹 시퀀스
DROP SEQUENCE GROUP_SEQ;
CREATE SEQUENCE GROUP_SEQ;

-- 게시글 시퀀스
DROP SEQUENCE BOARD_SEQ;
CREATE SEQUENCE BOARD_SEQ;

-- 공지사항 시퀀스
DROP SEQUENCE SCHE_SEQ;
CREATE SEQUENCE SCHE_SEQ;

DROP TABLE TB_COM_CODE CASCADE CONSTRAINT;
CREATE TABLE TB_COM_CODE(
  COMM_TY_CD VARCHAR2(10),
  COMM_CD VARCHAR2(20),
  COMM_CD_NM VARCHAR2(30),
  CONSTRAINT TB_CODE_PK PRIMARY KEY(COMM_TY_CD, COMM_CD)
);

-- 유저분류코드
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0100', 'U', '이용자');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0100', 'M', '관리자');

-- 도서분류코드
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0101', 'JA', '자바');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0101', 'PY', '파이썬');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0101', 'ED', '교양');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0101', 'CC', 'C언어');

-- 행사분류코드
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0102', 'CON', '강좌');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0102', 'MET', '모임');

-- 시간대코드
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0103', 'MO', '아침');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0103', 'AF', '오후');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0103', 'EV', '저녁');

-- 문의종류
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0104', 'DEL', '배송');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0104', 'REF', '환불');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0104', 'EXC', '교환');
INSERT INTO TB_COM_CODE(COMM_TY_CD, COMM_CD, COMM_CD_NM) VALUES('CODE0104', 'ETC', '기타');


--회원정보
DROP TABLE TB_COM_USER CASCADE CONSTRAINT;

CREATE TABLE TB_COM_USER(
  USER_CODE VARCHAR2(20),             -- 유저코드
  ID VARCHAR2(20),                  -- 아이디
  PW VARCHAR2(20),                   -- 패스워드
  EMAIL VARCHAR2(50),                      -- 이메일
  USER_IMAGE VARCHAR2(100),               -- 유저이미지
  POST_NUM VARCHAR2(20),                   -- 우편번호
  PHONE_NUM VARCHAR2(20),                  -- 전화번호
  ADDRESS VARCHAR2(200),                   -- 주소
  GRADE VARCHAR2(1) DEFAULT 'U',         -- 회원등급(이용자 : 'U', 관리자 : 'M')
  CONNECT_DATE VARCHAR2(30),            -- 최근접속시간
  NICK_NAME VARCHAR2(100),            -- 닉네임
  CONSTRAINT TB_COM_USER_PK PRIMARY KEY(USER_CODE)
);

INSERT INTO TB_COM_USER(USER_CODE, ID, PW, EMAIL, USER_IMAGE, POST_NUM, PHONE_NUM, ADDRESS, GRADE, CONNECT_DATE, NICK_NAME) VALUES (
          'USER' || LPAD(USER_SEQ.NEXTVAL, 6, 0), 'admin', 'admin', 'admin@naver.com', 'admin.png', '217-814', 
          '010-1434-8011', '서울시 송파구 방이동 현대아파트', 'M', '2015-12-15 01:01', '관리자1');

INSERT INTO TB_COM_USER(USER_CODE, ID, PW, EMAIL, USER_IMAGE, POST_NUM, PHONE_NUM, ADDRESS, CONNECT_DATE, NICK_NAME) VALUES (
          'USER' || LPAD(USER_SEQ.NEXTVAL, 6, 0), 'ranone', 'ranone', 'ranone@naver.com', 'ranone.png', '151-241',
          '010-8822-5318', '서울시 성동구 성수2동 롯데캐슬', '2015-12-16 13:01', '존');

INSERT INTO TB_COM_USER(USER_CODE, ID, PW, EMAIL, USER_IMAGE, POST_NUM, PHONE_NUM, ADDRESS, CONNECT_DATE, NICK_NAME) VALUES (
          'USER' || LPAD(USER_SEQ.NEXTVAL, 6, 0), 'love86n', 'love86n', 'love86n@naver.com', 'love86n.png', '391-756',
          '010-0235-7912', '서울시 송파구 방이3동 유라상가', '2015-12-17 15:33', '씬');

INSERT INTO TB_COM_USER(USER_CODE, ID, PW, EMAIL, USER_IMAGE, POST_NUM, PHONE_NUM, ADDRESS, CONNECT_DATE, NICK_NAME) VALUES (
          'USER' || LPAD(USER_SEQ.NEXTVAL, 6, 0), 'sawol', 'sawol', 'sawol@naver.com', 'sawol.png', '157-995',
          '010-1753-2718', '서울시 성북구 돈암1동 브라운스톤', '2014-12-18 04:27', '금사월');

INSERT INTO TB_COM_USER(USER_CODE, ID, PW, EMAIL, USER_IMAGE, POST_NUM, PHONE_NUM, ADDRESS, CONNECT_DATE, NICK_NAME) VALUES (
          'USER' || LPAD(USER_SEQ.NEXTVAL, 6, 0), 'ksy', 'ksy', 'ksy@naver.com', 'ksy.png', '134-512',
          '010-1326-2632', '서울시 중구 동대문4가 종로빌딩', '2015-03-23 17:49', '기성용');

INSERT INTO TB_COM_USER(USER_CODE, ID, PW, EMAIL, USER_IMAGE, POST_NUM, PHONE_NUM, ADDRESS, CONNECT_DATE, NICK_NAME) VALUES (
          'USER' || LPAD(USER_SEQ.NEXTVAL, 6, 0), 'shm', 'shm', 'shm@naver.com', 'shm.png', '613-844',
          '010-5551-3774', '서울시 노원구 상계3동 한신아파트', '2015-06-30 11:51', '쏜');

INSERT INTO TB_COM_USER(USER_CODE, ID, PW, EMAIL, USER_IMAGE, POST_NUM, PHONE_NUM, ADDRESS, CONNECT_DATE, NICK_NAME) VALUES (
          'USER' || LPAD(USER_SEQ.NEXTVAL, 6, 0), 'user', 'user', 'user@naver.com', 'user.jpg', '250-110',
          '010-7765-4321', '서울시 구로구 구로동 12-250', '2020-03-15 19:01', '시바');

commit;

--제품정보
DROP TABLE TB_PRODUCT CASCADE CONSTRAINT;
CREATE TABLE TB_PRODUCT(
  PRODUCT_CODE VARCHAR2(20),                  -- 제품코드
  PRODUCT_IMAGE VARCHAR2(100),                 -- 제품이미지
  PRODUCT_NAME VARCHAR2(200),                  -- 제품명
  PRODUCT_UNIT_PRICE NUMBER,		  -- 제품단가
  PRODUCT_COUNT NUMBER,		  -- 제품재고수량
  PRODUCT_CATEGORY_CD VARCHAR2(20),              -- 제품분류코드
  PRODUCT_INFO VARCHAR2(200),		-- 제품정보
  PRODUCT_DATE VARCHAR2(20),		-- 제품출간일
  PRODUCT_REG_DATE VARCHAR2(20),              -- 제품등록일
  CONSTRAINT TB_PRODUCT_PK PRIMARY KEY(PRODUCT_CODE)
);

INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '헬로 자바 프로그래밍.jpg', '헬로 자바 프로그래밍', 30000, 20, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '대유행병의 시대.jpg', '대유행병의 시대', 22800, 10, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '테러를 프로파일링하다.jpg', '테러를 프로파일링하다', 17500, 30, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '5인 5색 디저트 레시피.jpg', '5인 5색 디저트 레시피', 22000, 20, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '우리는 바이러스와 살아간다.jpg', '우리는 바이러스와 살아간다', 15000, 35, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '팅커벨 죽이기.jpg', '팅커벨 죽이기', 13800, 15, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '만약의 세계.jpg', '만약의 세계', 11800, 20, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '클린 브레인.jpg', '클린 브레인', 19000, 20, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '포스트잇처럼 가볍게 살고 싶어.jpg', '포스트잇처럼 가볍게 살고 싶어', 14000, 50, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '세상의 모든 수 이야기.jpg', '세상의 모든 수 이야기', 19000, 20, 'JA', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));

INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '딥러닝 데이터 전처리 입문.jpg', '딥러닝 데이터 전처리 입문', 20000, 50, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '식물 사진관.jpg', '식물 사진관', 16000, 10, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '범죄 심리의 재구성.jpg', '범죄 심리의 재구성', 15000, 30, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '소르본 철학 수업.jpg', '소르본 철학 수업', 15000, 40, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '화성 연대기.jpg', '화성 연대기', 15000, 30, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '로르샤흐.jpg', '로르샤흐', 28000, 20, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '사라진 건축, 잊힌 거리.jpg', '사라진 건축, 잊힌 거리', 22000, 15, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '위태한 유산.jpg', '위태한 유산', 13700, 10, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '홍하에서 온 푸른별들.jpg', '홍하에서 온 푸른별들', 25000, 5, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '영화하는 여자들.jpg', '영화하는 여자들', 19800, 5, 'PY', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));

INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '디지털 전자회로.jpg', '디지털 전자회로', 25000, 10, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '유비쿼터스 개론.jpg', '유비쿼터스 개론', 31000, 15, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '가장 쉬운 홈페이지형 블로그 만들기.jpg', '가장 쉬운 홈페이지형 블로그 만들기', 20000, 30, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '데이터 애널리틱스.jpg', '데이터 애널리틱스', 35000, 4, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), 'MS 팀즈 수업 디자인.jpg', 'MS 팀즈 수업 디자인', 20000, 10, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '양자 컴퓨터 원리와 수학적 기초.jpg', '양자 컴퓨터 원리와 수학적 기초', 25000, 8, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '왕초보 유튜브 프리미어 프로.jpg', '왕초보 유튜브 프리미어 프로', 23000, 9, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '카티아 날리지.jpg', '카티아 날리지', 34000, 15, 'ED', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));

INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '실전 C프로그래밍.jpg', '실전 C프로그래밍', 32000, 10, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '태양의 황금 사과.jpg', '태양의 황금 사과', 16000, 15, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '초보자를 위한 C언어 프로그래밍.jpg', '초보자를 위한 C언어 프로그래밍', 26000, 20, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '파생상품 C++.jpg', '파생상품 C++', 20000, 4, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '통역사의 일.jpg', '통역사의 일', 14400, 78, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '1일 1강 논어강독.jpg', '1일 1강 논어강독', 19800, 25, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '알기 쉽게 해설한 C++ 프로그래밍.jpg', '알기 쉽게 해설한 C++ 프로그래밍', 25000, 23, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '게임을 만들며 배우는 C 언어.jpg', '게임을 만들며 배우는 C 언어', 29000, 100, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '예제와 그림으로 쉽게 배우는 C프로그래밍.jpg', '예제와 그림으로 쉽게 배우는 C프로그래밍', 22000, 25, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), 'C언어 연습.jpg', 'C언어 연습', 20000, 34, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '힘들 땐 잠깐 쉬었다 가도 괜찮아.jpg', '힘들 땐 잠깐 쉬었다 가도 괜찮아', 14000, 6, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));
INSERT INTO TB_PRODUCT(PRODUCT_CODE, PRODUCT_IMAGE, PRODUCT_NAME, PRODUCT_UNIT_PRICE, PRODUCT_COUNT,  PRODUCT_CATEGORY_CD, PRODUCT_REG_DATE)
VALUES('P' || LPAD(PRODUCT_SEQ.NEXTVAL, 6, 0), '요즘 직장 생존법.jpg', '요즘 직장 생존법', 13800, 19, 'CC', TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'));

--제품댓글정보
DROP TABLE TB_PRODUCT_REPLY CASCADE CONSTRAINT;
CREATE TABLE TB_PRODUCT_REPLY(
  PRODUCT_CODE VARCHAR2(30),                  -- 제품코드
  USER_CODE VARCHAR2(20),                  -- 유저코드
  USER_REPLY_NO NUMBER(3),           -- 댓글일련번호
  USER_REPLY VARCHAR2(1000),         -- 댓글내용
  REPLY_DATE VARCHAR2(30),           -- 댓글날짜
  CONSTRAINT TB_PRODUCT_REPLY_PK PRIMARY KEY(PRODUCT_CODE, USER_CODE, USER_REPLY_NO),
  CONSTRAINT TB_PRODUCT_REPLY_FK_PRODUCT FOREIGN KEY(PRODUCT_CODE) REFERENCES TB_PRODUCT(PRODUCT_CODE),
  CONSTRAINT TB_PRODUCT_REPLY_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

--제품별점정보
DROP TABLE TB_PRODUCT_MARK CASCADE CONSTRAINT;
CREATE TABLE TB_PRODUCT_MARK(
  PRODUCT_CODE VARCHAR2(30),                  -- 투표코드
  USER_CODE VARCHAR2(20),                  -- 유저코드
  MARK_RATING NUMBER,        		 -- 별점(5점만점)
  CONSTRAINT TB_PRODUCT_MARK_PK PRIMARY KEY(PRODUCT_CODE, USER_CODE),
  CONSTRAINT TB_PRODUCT_MARK_FK_PRODUCT FOREIGN KEY(PRODUCT_CODE) REFERENCES TB_PRODUCT(PRODUCT_CODE),
  CONSTRAINT TB_PRODUCT_MARK_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

--판매내역정보
DROP TABLE TB_SELL CASCADE CONSTRAINT;
CREATE TABLE TB_SELL(
  SELL_CODE VARCHAR2(20),          -- 판매내역코드
  PRODUCT_CODE VARCHAR2(20),       -- 제품코드
  USER_CODE VARCHAR2(20),          -- 유저코드
  SELL_PRICE NUMBER,         -- 판매총가격
  SELL_COUNT NUMBER,         -- 판매총수량
  SELL_YN VARCHAR2(1) DEFAULT 'N',  -- 판매여부
  SELL_DATE VARCHAR2(30),          -- 판매일
  CONSTRAINT TB_SELL_PK PRIMARY KEY(SELL_CODE),
  CONSTRAINT TB_SELL_FK_PRODUCT FOREIGN KEY(PRODUCT_CODE) REFERENCES TB_PRODUCT(PRODUCT_CODE),
  CONSTRAINT TB_SELL_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000004', 'USER000005', 175000, 10, 'Y', '2020-01-01 10:15');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000022', 'USER000004', 150000, 6, 'Y', '2020-01-10 23:00');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000035', 'USER000005', 99000, 5, 'Y', '2020-01-12 12:00');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000030', 'USER000006', 128000, 4, 'Y', '2020-01-20 19:00');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000025', 'USER000004', 70000, 2, 'Y', '2020-01-25 12:18');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000024', 'USER000007', 20000, 1, 'Y', '2020-01-30 20:44');

INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000016', 'USER000005', 96000, 6, 'Y', '2020-02-08 12:00');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000041', 'USER000004', 69000, 5, 'Y', '2020-02-20 16:25');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000002', 'USER000004', 120000, 4, 'Y', '2020-03-01 14:57');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000040', 'USER000004', 28000, 2, 'Y', '2020-03-08 08:05');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000009', 'USER000007', 95000, 5, 'Y', '2020-03-21 18:50');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000036', 'USER000004', 150000, 6, 'Y', '2020-04-19 18:00');

INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000007', 'USER000006', 27600, 2, 'Y', '2020-04-20 09:51');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000008', 'USER000005', 59000, 5, 'Y', '2020-04-30 17:50');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000010', 'USER000006', 140000, 10, 'Y', '2020-05-05 15:40');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000005', 'USER000006', 132000, 6, 'Y', '2020-05-10 10:15');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000011', 'USER000006', 95000, 5, 'Y', '2020-05-17 17:14');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000017', 'USER000007', 280000, 10, 'Y', '2020-05-21 11:01');

INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000009', 'USER000004', 380000, 20, 'Y', '2020-05-28 09:51');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000012', 'USER000005', 200000, 10, 'Y', '2020-05-30 17:50');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000014', 'USER000006', 450000, 30, 'Y', '2020-06-02 15:40');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000020', 'USER000007', 100000, 4, 'Y', '2020-06-09 10:15');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000004', 'USER000006', 35000, 2, 'Y', '2020-06-14 15:20');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000029', 'USER000006', 340000, 10, 'Y', '2020-06-22 10:15');

INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000028', 'USER000006', 23000, 1, 'Y', '2020-07-01 21:08');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000032', 'USER000007', 52000, 2, 'Y', '2020-07-08 12:30');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000012', 'USER000005', 8400, 6, 'Y', '2020-07-13 10:41');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000023', 'USER000004', 93000, 3, 'Y', '2020-07-20 23:30');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000038', 'USER000005', 220000, 10, 'Y', '2020-07-22 10:41');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000031', 'USER000006', 48000, 3, 'Y', '2020-07-28 23:30');

INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000037', 'USER000007', 290000, 10, 'Y', '2020-08-07 10:08');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000011', 'USER000005', 57000, 3, 'Y', '2020-08-11 16:24');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000033', 'USER000007', 200000, 10, 'Y', '2020-08-14 10:08');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000026', 'USER000005', 480000, 20, 'Y', '2020-08-18 16:24');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000035', 'USER000004', 198000, 10, 'Y', '2020-08-19 10:00');
INSERT INTO TB_SELL(SELL_CODE, PRODUCT_CODE, USER_CODE, SELL_PRICE, SELL_COUNT, SELL_YN, SELL_DATE)
VALUES('S' || LPAD(SELL_SEQ.NEXTVAL, 6, 0), 'P000036', 'USER000006', 50000, 2, 'Y', '2020-08-20 23:15');

--장바구니정보
DROP TABLE TB_CART CASCADE CONSTRAINT;
CREATE TABLE TB_CART(
  CART_CODE VARCHAR2(20),          -- 장바구니코드
  PRODUCT_CODE VARCHAR2(20),       -- 제품코드
  USER_CODE VARCHAR2(20),          -- 유저코드
  CART_PRICE NUMBER,         -- 해당제품총가격
  CART_COUNT NUMBER,         -- 해당제품총수량
  CART_DATE VARCHAR2(30),          -- 장바구니 저장일
  CHECK_YN VARCHAR2(1) DEFAULT 'N',          -- 상품선택
  CONSTRAINT TB_CART_PK PRIMARY KEY(CART_CODE),
  CONSTRAINT TB_CART_FK_PRODUCT FOREIGN KEY(PRODUCT_CODE) REFERENCES TB_PRODUCT(PRODUCT_CODE),
  CONSTRAINT TB_CART_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

--행사정보
DROP TABLE TB_EVENT CASCADE CONSTRAINT;
CREATE TABLE TB_EVENT(
  EVENT_NO VARCHAR2(30),             -- 행사번호
  EVENT_IMAGE VARCHAR2(100),	-- 행사이미지
  EVENT_TITLE VARCHAR2(1000),        -- 행사이름
  EVENT_UNIT_PRICE NUMBER DEFAULT 0,	  -- 행사가격
  EVENT_CATEGORY_CD VARCHAR2(3),	-- 행사분류코드
  EVENT_CONTENTS VARCHAR2(4000),     -- 행사내용
  EVENT_DATE VARCHAR2(30),           -- 행사날짜
  EVENT_TIME_CD VARCHAR2(3),	-- 행사시간대코드
  EVENT_LOC VARCHAR2(200),     -- 행사위치
  EVENT_CUR_POP NUMBER(4) DEFAULT 0,	-- 행사 현재 참여인원
  EVENT_MAX_POP NUMBER(4),	-- 행사 최대 참여인원
  EVENT_REG_DATE VARCHAR2(20),              -- 행사 등록일
  EVENT_YN VARCHAR2(1) DEFAULT 'N',  -- 행사 승인 여부
  CONSTRAINT TB_EVENT_PK PRIMARY KEY(EVENT_NO)
);

INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '라즈베리파이 Cluster 기반 Keras를 활용한 AI 구현.jpg', '라즈베리파이 Cluster 기반 Keras를 활용한 AI 구현', 60000, 'CON', 'HPC 이노베이션허브', '2020-10-18' ,'EV', '경기도 성남시 수정구 대왕판교로 815 판교창조경제밸리 기업지원허브' ,1000, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '인디음악 초보자를 위한 안내서.jpg', '인디음악 초보자를 위한 안내서', 100000, 'CON', '"인디음악 초보자를 위한 안내서"는 현재 활발하게 활동 중인 인디뮤지션들의 경험을 공유하는 강연 프로그램입니다.', '2020-09-03' ,'AF', '서울 강남구 삼성동 159 코엑스' , 800, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '직장다니며 추가수익을 만드는 방법.jpg', '직장다니며 추가수익을 만드는 방법', 5000, 'CON', '나는 직장급여로 빠듯한 생활을 하고 있지만,누군가는 월급 이외의 하루3시간 추가 수익으로 여유로운 생활을 하고 있다?!', '2020-08-31' ,'EV', '서울특별시 강남구 봉은사로68길 75 우리빌딩' , 500, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '공공데이터를 활용한 데이터시각화.jpg', '공공데이터를 활용한 데이터시각화', 10000, 'CON', '인공지능시대, 4차산업을 이끌어가는 필수 언어!<br>4~6인 이내의 소수정예 수업으로 4주 단기특강으로', '2020-08-31' ,'EV', '부산광역시 해운대구 좌동순환로 78 건우빌딩' , 10, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '편집디자인에 필요한 인디자인강좌.jpg', '편집디자인에 필요한 인디자인강좌', 5000, 'CON', '나는 직장급여로 빠듯한 생활을 하고 있지만,누군가는 월급 이외의 하루3시간 추가 수익으로 여유로운 생활을 하고 있다?!', '2020-08-31' ,'AF', '서울 강남구 삼성동 159 코엑스' , 100, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '금린이지만 괜찮아.jpg', '금린이지만 괜찮아 2기', 10000, 'CON', '한번도 들어보지 않은 사람은 있어도, 한번만 들은 사람은 없을 강의를 약속합니다.2시간의 시간투자를 통해 여러분의 시야를 넓혀드리겠습니다.', '2020-08-29' ,'EV', '서울특별시 중구 청계천로 100' , 20, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '2020 게임 Reboot 세미나.jpg', '2020 게임 Reboot 세미나', 10000, 'CON', '경기도는 올해도 게임의 운영 및 서비스 단계에서 인사이트를 얻기 위한 게임 리부트 세미나를 마련하였습니다.', '2020-09-03' ,'EV', '서울 강남구 삼성동 159 코엑스' , 100, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '비대면교육의 해결방안 세미나.jpg', '포스트코로나, 비대면교육의 해결방안 세미나', 0, 'CON', '포스트코로나, 비대면교육의 해결방안 : 온라인교육영상을 쉽고 빠르게 만들어 봐요', '2020-08-28' ,'AF', '서울특별시 강남구 역삼로 168' , 30, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '제6회 한중 인문학포럼.jpg', '제6회 한중 인문학포럼', 1000, 'CON', '본 포럼은 고용부과 후원하는 인문가치의 재발견과 새로운 해석을 위한 포럼입니다.', '2020-09-25' ,'AF', '서울 강남구 삼성동 159 코엑스' , 100, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');

INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '강점 카드 그룹코칭.jpg', '강점 카드 그룹코칭', 2000, 'MET', '긍정심리학을 기반으로 강점카드를 통해 나의 강점도 발견하고 타인의 강점도 발견하며 나의 강점을 바탕으로 앞으로의 실천계획도 세워본다', '2020-09-20' ,'EV', '서울특별시 마포구 양화로 160' ,20, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '퍼실리테이션 독서모임.jpg', '퍼실리테이션 독서모임', 1000, 'MET', '코로나19로 인해 출강이나 회의진행이 어려워진 분들과 함께 퍼실리테이션 관련 도서를 읽자는 모임입니다.', '2020-08-31' ,'MO', '서울 구로구 구로동 182-4 1106호' , 10, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '글쓰기를 위한 상식공부.jpg', '글쓰기를 위한 상식공부', 2000, 'MET', '글을 잘 쓰기 위해 공부하는 모임입니다.', '2020-08-21' ,'AF', '서울 구로구 구로동 182-4 1106호' , 15, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '일산 영화와 독서토론 모임.jpg', '일산 영화와 독서토론 모임', 5000, 'MET', '일산 최고의 독서 토론 및 영화 감상 모임 커뮤니티 입니다.', '2020-08-30' ,'AF', '경기도 고양시 일산서구 중앙로 1388 태영프라자' , 10, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '스스로 심화 동아리.jpg', '스스로 심화 동아리', 5000, 'MET', '울산 소재로 콘텐츠를 제작할 동아리를 모집합니다. UCKL 시설 및 장비 지원은 물론 최대 50만원까지 재료비도 지원하니 빨리빨리 서둘러서 지원하세요!', '2020-08-21' ,'AF', '울산광역시 남구 대학로 146' , 20, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '언택트 시대 직장인.jpg', '언택트 시대 직장인, 우리 어떻게 지내나요?', 5000, 'MET', '주말에도 나가기 어려운데 우리 온라인으로 모여서 얘기나 해볼까요?', '2020-08-29' ,'EV', '서울 구로구 구로동 182-4' , 30, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '소비자를 끌어당기는 9가지 방법_모티브 소사이어티.jpg', '소비자를 끌어당기는 9가지 방법_모티브 소사이어티', 5000, 'MET', '모티브 소사이어티 프로젝트!', '2020-09-20' ,'EV', '서울특별시 강남구 테헤란로 156' , 10, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');
INSERT INTO TB_EVENT(EVENT_NO, EVENT_IMAGE, EVENT_TITLE, EVENT_UNIT_PRICE, EVENT_CATEGORY_CD, EVENT_CONTENTS,  EVENT_DATE, EVENT_TIME_CD, EVENT_LOC, EVENT_MAX_POP, EVENT_REG_DATE, EVENT_YN)
VALUES('EVE' || LPAD(EVENT_SEQ.NEXTVAL, 6, 0), '강남 인문고전 독서모임.jpg', '강남 인문고전 독서모임', 10000, 'MET', '철학 문학 인문고전을 체계적으로 접하는 독서모임입니다.', '2020-09-08' ,'AF', '서울특별시 강남구 봉은사로18길 85' , 20, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI'), 'Y');

--예약정보
DROP TABLE TB_RESERVE CASCADE CONSTRAINT;
CREATE TABLE TB_RESERVE(
  RESERVE_NO VARCHAR2(30),            -- 예약번호
  USER_CODE VARCHAR(20),		-- 유저코드
  EVENT_NO VARCHAR2(30),		-- 행사번호
  RESERVE_PRICE NUMBER,	-- 예약 총 가격
  RESERVE_POP NUMBER(4),	-- 행사 예약 인원수
  RESERVE_YN VARCHAR2(1) DEFAULT 'N',  -- 예약 승인 여부
  RESERVE_SELL_YN CHAR(1) DEFAULT 'N',	-- 예약 결제 여부
  RESERVE_DATE VARCHAR2(30),	-- 예약 날짜
  CONSTRAINT TB_RESERVE_PK PRIMARY KEY(RESERVE_NO),
  CONSTRAINT TB_RESERVE_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE,
  CONSTRAINT TB_RESERVE_FK_EVENT FOREIGN KEY(EVENT_NO) REFERENCES TB_EVENT(EVENT_NO)
);

--행사댓글정보
DROP TABLE TB_EVENT_REPLY CASCADE CONSTRAINT;
CREATE TABLE TB_EVENT_REPLY(
  EVENT_NO VARCHAR2(30),                  -- 행사 번호
  USER_CODE VARCHAR2(20),                  -- 유저코드
  USER_REPLY_NO NUMBER(3),           -- 댓글일련번호
  USER_REPLY VARCHAR2(1000),         -- 댓글내용
  REPLY_DATE VARCHAR2(30),           -- 댓글날짜
  CONSTRAINT TB_EVENT_REPLY_PK PRIMARY KEY(EVENT_NO, USER_CODE, USER_REPLY_NO),
  CONSTRAINT TB_EVENT_REPLY_FK_PRODUCT FOREIGN KEY(EVENT_NO) REFERENCES TB_EVENT(EVENT_NO),
  CONSTRAINT TB_EVENT_REPLY_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

--행사별점정보
DROP TABLE TB_EVENT_MARK CASCADE CONSTRAINT;
CREATE TABLE TB_EVENT_MARK(
  EVENT_NO VARCHAR2(30),		-- 행사번호
  USER_CODE VARCHAR2(20),		-- 유저코드
  MARK_RATING NUMBER,        		 -- 별점(5점만점)
  CONSTRAINT TB_EVENT_MARK_PK PRIMARY KEY(EVENT_NO, USER_CODE),
  CONSTRAINT TB_EVENT_MARK_FK_PRODUCT FOREIGN KEY(EVENT_NO) REFERENCES TB_EVENT(EVENT_NO),
  CONSTRAINT TB_EVENT_MARK_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

-- 고객센터정보
DROP TABLE TB_QNA CASCADE CONSTRAINT;
CREATE TABLE TB_QNA(
 QNA_NO VARCHAR2(20),	-- 문의번호
 USER_CODE VARCHAR2(20),	-- 유저코드
 QNA_TITLE VARCHAR(100),	-- 문의제목
 QNA_CONTENTS VARCHAR(3000),	-- 문의내용
 QNA_DATE VARCHAR2(30),	-- 문의날짜
 QNA_CATEGORY_CD VARCHAR2(5) DEFAULT 'ETC',	-- 문의종류
 RESPONSE_USER VARCHAR2(20),	-- 질문자코드
 QNA_DEPTH NUMBER(3) DEFAULT 0,
 GROUP_NO VARCHAR2(20),	-- 문의그룹번호
 CONSTRAINT TB_QNA_PK PRIMARY KEY(QNA_NO),
 CONSTRAINT TB_QNA_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE,
 CONSTRAINT TB_QNA_FK_RESPONSE FOREIGN KEY(RESPONSE_USER) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

insert into TB_QNA(QNA_NO, USER_CODE, QNA_TITLE, QNA_CONTENTS, QNA_DATE, QNA_CATEGORY_CD, RESPONSE_USER, GROUP_NO)
values ('Q' || LPAD(QNA_SEQ.NEXTVAL, 6, 0), 'USER000003', '문의 시험 제목', '문의 시험 내용1', '2015-12-31 14:17', 'ETC', 'USER000003', 'G' || LPAD(GROUP_SEQ.NEXTVAL, 6, 0));
insert into TB_QNA(QNA_NO, USER_CODE, QNA_TITLE, QNA_CONTENTS, QNA_DATE, QNA_CATEGORY_CD, RESPONSE_USER, GROUP_NO)
values ('Q' || LPAD(QNA_SEQ.NEXTVAL, 6, 0), 'USER000003', '문의 시험 제목2', '문의 시험 내용2', '2018-08-01 08:15', 'REF', 'USER000003', 'G' || LPAD(GROUP_SEQ.NEXTVAL, 6, 0));
insert into TB_QNA(QNA_NO, USER_CODE, QNA_TITLE, QNA_CONTENTS, QNA_DATE, QNA_CATEGORY_CD, RESPONSE_USER, GROUP_NO)
values ('Q' || LPAD(QNA_SEQ.NEXTVAL, 6, 0), 'USER000004', '문의 시험 제목3', '문의 시험 내용3', '2018-09-15 20:45', 'ETC', 'USER000004', 'G' || LPAD(GROUP_SEQ.NEXTVAL, 6, 0));
insert into TB_QNA(QNA_NO, USER_CODE, QNA_TITLE, QNA_CONTENTS, QNA_DATE, QNA_CATEGORY_CD, RESPONSE_USER, GROUP_NO)
values ('Q' || LPAD(QNA_SEQ.NEXTVAL, 6, 0), 'USER000004', '문의 시험 제목4', '문의 시험 내용4', '2019-01-01 01:10', 'ETC', 'USER000004', 'G' || LPAD(GROUP_SEQ.NEXTVAL, 6, 0));

insert into TB_QNA(QNA_NO, USER_CODE, QNA_TITLE, QNA_CONTENTS, QNA_DATE, QNA_CATEGORY_CD, RESPONSE_USER, QNA_DEPTH, GROUP_NO)
values ('Q' || LPAD(QNA_SEQ.NEXTVAL, 6, 0), 'USER000002', '관리자 답변 제목1', '답변 시험 내용1', '2020-06-22 22:15', 'ETC', 'USER000003', 1, 'G000002');
insert into TB_QNA(QNA_NO, USER_CODE, QNA_TITLE, QNA_CONTENTS, QNA_DATE, QNA_CATEGORY_CD, RESPONSE_USER, QNA_DEPTH, GROUP_NO)
values ('Q' || LPAD(QNA_SEQ.NEXTVAL, 6, 0), 'USER000003', '사용자 답변 제목2', '답변 시험 내용2', '2020-06-24 10:10', 'ETC', 'USER000003', 2, 'G000002');

--공지사항정보
DROP TABLE TB_SCHE CASCADE CONSTRAINT;
CREATE TABLE TB_SCHE(
  SCHE_NO VARCHAR2(30),             -- 공지사항번호
  USER_CODE VARCHAR2(20),            -- 유저코드
  SCHE_TITLE VARCHAR2(1000),        -- 공지사항제목
  SCHE_CONTENTS VARCHAR2(4000),     -- 공지사항내용
  SCHE_DATE VARCHAR2(30),           -- 공지사항작성날짜
  SCHE_HITS NUMBER DEFAULT 0,     -- 조회수
  CONSTRAINT TB_SCHE_PK PRIMARY KEY(SCHE_NO),
  CONSTRAINT TB_SCHE_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

--게시판정보
DROP TABLE TB_BOARD CASCADE CONSTRAINT;
CREATE TABLE TB_BOARD(
  BOARD_NO VARCHAR2(30),             -- 게시글번호
  USER_CODE VARCHAR2(20),            -- 유저코드
  BOARD_TITLE VARCHAR2(1000),        -- 게시글제목
  BOARD_CONTENTS VARCHAR2(4000),     -- 게시글내용
  BOARD_DATE VARCHAR2(30),           -- 게시글작성날짜
  BOARD_HITS NUMBER DEFAULT 0,     -- 조회수
  BOARD_RATING NUMBER DEFAULT 0,   -- 좋아요
  BOARD_CATEGORY_CD CHAR(3) DEFAULT 'FRE',	-- 게시글구분코드
  CONSTRAINT TB_BOARD_PK PRIMARY KEY(BOARD_NO),
  CONSTRAINT TB_BOARD_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

--댓글정보
DROP TABLE TB_REPLY CASCADE CONSTRAINT;
CREATE TABLE TB_REPLY(
  BOARD_NO VARCHAR2(30),             -- 게시글번호
  USER_CODE VARCHAR2(20),            -- 유저코드
  USER_REPLY_NO NUMBER(3),           -- 댓글일련번호
  USER_REPLY VARCHAR2(1000),         -- 댓글내용
  REPLY_DATE VARCHAR2(30),           -- 댓글날짜
  CONSTRAINT TB_REPLY_PK PRIMARY KEY(BOARD_NO, USER_CODE, USER_REPLY_NO),
  CONSTRAINT TB_REPLY_FK_BOARD FOREIGN KEY(BOARD_NO) REFERENCES TB_BOARD(BOARD_NO),
  CONSTRAINT TB_REPLY_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

-- 공감도정보
DROP TABLE TB_MARK CASCADE CONSTRAINT;
CREATE TABLE TB_MARK(
  BOARD_NO VARCHAR2(30),             -- 투표코드
  USER_CODE VARCHAR2(20),            -- 유저코드
  MARK_RATING NUMBER,                -- 좋아요
  CONSTRAINT TB_MARK_PK PRIMARY KEY(BOARD_NO, USER_CODE),
  CONSTRAINT TB_MARK_FK_BOARD FOREIGN KEY(BOARD_NO) REFERENCES TB_BOARD(BOARD_NO),
  CONSTRAINT TB_MARK_FK_USER FOREIGN KEY(USER_CODE) REFERENCES TB_COM_USER(USER_CODE) ON DELETE CASCADE
);

insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000002', '구글 자바 컨테이너 기술(Jib), 확장 프레임워크 공개', '구글의 지브(Jib)를 사용하면 개발자가 자바 애플리케이션용 도커 컨테이너 생성을 최적화하고, 메이븐(Maven) 및 그래들(Gradle)용 플러그인을 사용자 정의해 프로세스를 조정할 수 있다. 구글이 자바 애플리케이션용 지브 컨테이너화 기술을 확장하는 지브 플러그인 확장 프레임워크(Jib Plugin Extension Framework)를 공개했다. 이를 통해 메이븐 및 그래들 빌드 시스템용 지브 플러그인을 사용자 정의할 수 있다. 해당 프레임워크는 현재 기트허브에서 사용할 수 있다. 개발자는 다양한 확장 기능을 제공하는 이 프레임워크를 통해 원하는 대로 지브를 조정할 수 있다. 예를 들면 ZIP 파일에서 콘텐츠를 가져오는 커스텀 이미지 레이어를 추가해 확장 프로그램을 작성할 수 있다. 또한 다른 사람이 작성한 확장 프로그램을 가져와서 자신의 프로젝트에 적용할 수 있다. 개발자는 빌드하려는 이미지의 모든 측면을 수정할 수도 있다.지브 컨테이너화 프레임워크는 지난 6월 처음 출시됐다. 도커 또는 OCI 컨테이너 이미지를 구축하는 방법을 설명하는 툴에 구애받지 않는 메커니즘인 CBPS(Container Build Plan Specification)에 의해 구동된다. 구글은 프레임워크의 기능을 다음과 같이 언급했다. <br>• 이미지 레이어 미세 조정 <br>• 빠른 시작을 위해 GraalVM 네이티브 이미지 컨테이너화<br>• 적은 설치 공간을 위한 jlink 이미지 컨테이너화<br>구글은 지브용 애플리케이션 프레임워크 지원이 얼마나 향상됐는지도 자세히 설명했다. 회사에 따르면 스프링 부트(Spring Boot)와 쿼커스(Quarkus)용 메이븐 및 그래들 지브 확장 프로그램과 그랄VM용 메이븐 확장 프로그램이 최근 소개됐다.</br>', '2020-08-26 14:13', 0, 0);
insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000002', '표준 없는 하드웨어 기반 암호화···IBM, 인텔, AMD의 서로 다른 접근법', '전송되는 데이터를 암호화할 수 있다. 저장해 보관하는 데이터도 암호화할 수 있다. 그러나 암호화가 어려운 데이터가 있는데, 바로 사용하는 데이터이다. 문서에서 맞춤법을 검사하는 등 애플리케이션이 데이터를 처리하기 위해서는 데이터를 볼 수 있어야 한다.토큰화와 형식-유지, 검색 가능, (수학적 연산을 가능하게 만드는)동형(homomorphic), 멀티-파티 암호화 같은 소프트웨어 기반 솔루션들이 있다. 하지만 느리고, 이용하기 불편하고, 지원하지 않는 사용례들이 있다.하드웨어 기반 보호가 효과적인 방법이다. 스마트폰에 이미 사용되고 있다. 기기의 나머지 부분에 보이지 않는 방법으로 ID와 지불 데이터를 처리할 수 있는 시큐어 엔클레이브(Secure Enclave)이다.기업 서버에서는 컨피덴셜 컴퓨팅(confidential computing)으로 부르는 기술이다. 이와 관련된 중요한 2가지가 있다. 가장 잘 알려진 것은 이용 중인 데이터와 애플리케이션을 보호하는 애플 칩에 구현된 시큐어 엔클레이브인 인텔의 SGX이다. 이 엔클레이브는 꽤 작다. 엔클레이브를 이용하기 위해서는 일반적으로 애플리케이션을 다시 구현해야 한다. 그러나 작게 유지하면서, 결함이 있는 애플리케이션 논리로 초래되는 위험을 최소화할 수 있다.또 다른 방법으로는 IBM Z 시스템 메인프레임과 리눅스원 서버의 S390 칩에 사용하는 방법, AMD가 EPYC 칩에 사용하는 방법들이 있다. 여기에 보호된 엔클레이브는 꽤 크고, 애플리케이션과 그 안의 전체 가상 머신이 포함되어 있다. 엔클레이브 내부에서 작동하도록 애플리케이션 설계를 바꾸거나 다시 쓸 필요가 없다는 의미다.클라우드 공급업체도 동참하고 있다. ', '2020-08-25 14:13', 0, 0);
insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000002', 'MS 365 웹용 워드, 음성을 텍스트로 변환하는 기능 추가', '마이크로소프트가 녹음 파일을 텍스트로 전사해주는 기능을 웹용 워드에 추가했다. 마이크로소프트 365 구독자를 대상으로 웹용 워드에서 무료 제공된다. 회사에 따르면 웹용 워드에서 녹음 파일을 불러오거나, 워드에서 직접 대화를 녹음해 바로 전사할 수 있다. 전자의 경우 파일 크기는 최대 200MB까지 가능하며, 한 달 기준 5시간 분량의 녹음 파일을 업로드할 수 있다. 워드에서 직접 녹음하는 경우에는 제한이 없다. 단, 현재는 영어만 지원된다. 워드 화면에서 우측 상단의 받아쓰기(dictate) 버튼을 누르면 그 아래 전사하기(Transcribe)가 있다. 이를 누르고 다음 단계(파일 업로드 및 직접 녹음)를 진행하면 된다. 변환된 텍스트가 화자별로 구분돼 사이드바에 나타난다.녹음 파일 또한 화자별로 분리돼 원하는 부분만 다시 듣기가 가능하다. 텍스트를 수정하거나 화자를 지정한 다음, 전체 전사본을 워드 문서로 이동하면 된다. 필요한 부분만 더하기(+) 버튼을 눌러 옮길 수도 있다. 해당 기능은 현재 마이크로소프트 365 웹용 워드에서만 지원된다. 마이크로소프트는 올해 말 iOS 및 안드로이드 앱용 워드에서도 이 기능을 제공할 예정이라고 밝혔다. ciok@idg.co.kr', '2020-08-24 14:14', 0, 0);
insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000002', '쿤텍, 해커유인시스템 디셉션그리드 공급', '쿤텍이 미국 트랩엑스의 사이버 기만기술(Deception Technology) 기반 해커유인시스템 디셉션그리드(DeceptionGRID)를 국내 산업제어시설과 국방 분야에 공급해 운영기술(OT) 보안을 지원한다고 밝혔다.IoT 장비나 모바일 장비 등을 노리는 새로운 유형의 보안 위협을 효율적으로 방어할 수 있다는 평가를 받고 있는 디셉션그리드는 APT, 제로데이(Zero-day) 등 진화된 공격으로부터 실제 자산을 지킬 수 있도록 지원한다고 업체 측은 설명했다. 기존 의료, 정부, 제조, 금융, 리테일 등의 산업군에서 주로 사용됐으며, 최근에는 OT 분야의 보안 강화를 위해 발전소, 제조시설, 공장 등의 산업제어시설 분야로 그 범위를 확장하고 있다.회사에 따르면 디셉션그리드는 PC 전체 자산을 완전히 복제하는 Full OS 트랩 기능을 제공해 고객의 실제 자산과 동일하게 만든 정교한 미끼와 트랩을 배포한다. 의도적으로 배포된 트랩은 공격자를 속일 수 있으며, 이에 속은 공격자가 트랩에 접속할 경우 100% 가까운 확률로 공격을 잡아낸다.다중 레이어를 기반으로 다양한 종류의 네트워크 및 자산을 지원하는 디셉션그리드는 트랩 가상화를 위한 다양한 플랫폼 가상화를 제공하고 있으며, 사용자가 다양하게 트랩을 구성할 수 있도록 커스터마이징 기능을 제공한다. 그리고 트랩 배포를 위한 옵션도 유연해 기존 보안 솔루션과 통합할 수 있다.또한 네트워크 자산 탐지가 가능한 자동 스캔 기능으로 네트워크에 침입한 공격자 및 공격자가 사용한 공격 도구, 악용된 프로토콜까지도 실시간으로 탐지할 수 있으며, 다양한 보안 솔루션 및 각종 방화벽과 연동할 수 있다. ciokr@idg.co.kr', '2020-08-23 14:14', 1, 1);
insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000003', '클라우드 기반 IDE 플랫폼 깃파드(Gitpod) 오픈소스로 전환', '25일(현지 시각) 개발환경 기술 업체 깃파드가 (회사 이름과 동일한) 클라우드 기반 IDE 플랫폼을 오픈소스로 제공한다고 밝혔다. 깃파드는 바로 코딩할 수 있는 개발환경을 자동으로 구축해 주는 클라우드 기반 IDE 플랫폼이다. 회사에 따르면 이제 깃파드 커뮤니티는 기술 개발에 참여할 수 있으며, 개발자들은 자신의 워크플로우에서 깃파드를 쉽게 사용하고 통합할 수 있다. 쿠버네티스 애플리케이션인 깃파드를 사용하면 개발환경을 코드로 유지해, 프로젝트 소스 코드의 수동 단계를 기계가 실행 가능한 부분으로 전환할 수 있다. 이 플랫폼은 리포지토리의 변경 사항을 모니터링하고, 모든 변경 사항에 맞는 개발환경을 준비한다. 이러한 준비에는 다음이 포함된다. <br><br>• 도구 설정 <br>• 깃 브랜치(Git branch) 확인<br>• 코드 컴파일링<br>• 종속성 다운로드<br>• 필요한 모든 것을 초기화<br>개발자 워크플로우가 간소화돼 애플리케이션을 더욱더 빠르게 구축할 수 있다고 회사 측은 설명했다. 코딩은 CI/CD 개념을 개발환경에 적용하여 브랜치(branch), 이슈(issue), 병합(merge), 풀 리퀘스트(pull request)에서 시작할 수 있다. 깃파드는 기트랩(GitLab), 기트허브 엔터프라이즈(GitHub Enterprise), 비트버킷(Bitbucket) 등의 코드 호스팅 플랫폼과 연동된다. 깃파드 측이 언급한 이 플랫폼의 이점은 아래와 같다. <br><br>• 컨텍스트 전환과 개발환경 유지에 드는 시간이 줄어 리드 타임을 단축한다.<br>• 깃 리포지토리의 구성 버전 관리를 통한 깃옵스(GitOps) 접근 방식으로 구성 드리프트를 제거한다. 이는 일관되고 재현 가능한 개발환경을 보장한다. <br>• 코드 리뷰, 멘토링, 스냅샷 공유 등 원격 협업을 지원한다.<br>', '2020-08-25 14:15', 1, 0);
insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000003', '머신러닝 운영과 관리 ML옵스가 뜬다', '데이터 과학자가 데이터를 태깅하고 정확한 머신러닝 모델을 만들기가 어렵다고 하지만, 프로덕션에서 머신러닝 모델을 관리하는 일은 이보다 더 까다로울 수 있다. 모델 드리프트(Model Drift) 인식, 업데이트된 데이터 집합을 사용한 모델 재학습, 성능 개선, 기반 기술 플랫폼 유지보수, 모두 중요한 데이터 과학의 작업들이다. 이와 같은 작업이 없으면 모델이 잘못된 결과를 생산하고 결과적으로 비즈니스에 큰 피해가 발생할 수 있다. 프로덕션급 모델 개발은 쉬운 일이 아니다. 한 머신러닝 연구에 따르면, 기업의 55%는 모델을 프로덕션에 구축한 적이 없고, 약 40%는 모델 하나를 배포하는 데 30일 이상이 소요되는 것으로 나타났다. 성공에는 새로운 과제가 따른다. 응답 기업의 41%는 머신러닝 모델의 버전 관리와 재현 가능성에 어려움을 느낀다고 답했다. 여기서 얻을 수 있는 교훈은 머신러닝 모델이 프로덕션에 구축되어 비즈니스 프로세스에 사용하기 시작하면 새로운 장애물이 나타난다는 것이다. 모델 관리와 운영은 한때 숙련된 데이터 과학 팀을 위한 과제라는 인식이 있었다. 현재 모델 관리와 운영 작업에는 프로덕션 머신러닝 모델의 드리프트 모니터링, 모델 재학습 자동화, 드리프트가 심할 경우 알림, 모델에 업그레이드가 필요할 때 인식하기 등이 포함된다. 머신러닝에 투자하는 기업이 늘어나면서 모델 관리와 운영에 대한 인식을 구축해야 할 필요성도 커지고 있다. 좋은 소식은 오픈소스 ML플로우(MLFlow), DVC와 같은 플랫폼과 라이브러리, 그리고 알터릭스(Alteryx), 데이터브릭스(Databricks), 다타이쿠(Dataiku), SAS, 데이터로봇(DataRobot), 모델옵(ModelOp)의 상용 툴 등으로 데이터 과학 팀의 모델 관리와 운영이 한결 쉬워졌다는 점이다. 퍼블릭 클라우드 제공업체도 애저 머신러닝에서 ML옵스 구현하기와 같은 수행 방법을 공유하고 있다.</br>', '2020-08-22 14:16', 0, 0);
insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000002', 'TSMC, 5nm 및 3nm 공정 계획 발표··· 애플 기기에 가지는 의미는?', 'TSMC가 회사의 연례 테크놀로지 심포지움에서 미래의 칩 기술에 대한 세부 정보를 공개했다. 애플 실리콘과 관련해 의미있는 시사점을 제공한다. TSMC(Taiwan Semiconductor Manufacturing Corporation)는 아이폰과 아이패드(향후에는 맥)에 탑재되는 A 시리즈 칩을 독점 제조하고 있다. 따라서 TSMC의 제조 공정 기술은 애플 실리콘의 성능 및 효율성과 직접적인 관계를 지닌다. TSMC의 이번 발표 내용이 향후 2년 동안 애플 칩에 어떤 의미가 있는지 살펴본다. 5nm 공정 애플의 A12 프로세서는 제조 당시 TSMC의 최신 기술인 7nm 공정에 기반해 제작됐다. 아이폰 11의 A13 칩에는 이 제조공정의 ‘2세대’ 버전이 적용됐다. 올 가을 등장하는 애플의 A14 프로세서에서는 회사의 5nm 공정이 처음으로 대량 생산에 도입될 전망이다. 올해 말 등장하는 맥용 애플 칩도 TSMC의 새로운 5nm 공정에 기반할 것으로 관측된다. TSMC는 회사의 5nm 공정 기술이 동일한 면적에 80% 더 많은 칩 로직을 집적할 수 있으며, 동일 성능 기준 시 전력이 30% 감소하며, 동일 전력 기준 시 성능이 15% 증가할 것이라고 전했다. 아울러 TSMC는 내년에는 향상된 ‘N5P’ 공정 노드를 적용하고자 개발 중이라고 전했다. 올해 가을 등장하는 5nm 공정의 개선 버전에 해당되는 이 기술은, 동일한 전력에서 성능이 5% 향상되거나 동일한 성능에서 10% 전력 절감이 구현될 것으로 예상되고 있다. N5P 기술이 적용될 애플 실리콘은 A15일 가능성이 높다. 3nm 전망 2022년에는 3nm 공정 기술이 등장한다. 2018년의 7nm, 2020년의 5nm에 이은 또 다른 도약에 해당한다. TSMC는 5nm 공정에 비해 전력 소비가 25~30%(동일 속도 기준), 성능이 10~15%(동일 전력 기준) 개선될 것으로 기대했다. 트랜지스터 밀도는 약 70% 향상될 것이라는 설명이다. TSMC의 설명대로라면 2년 후 등장하는 애플 실리콘은 현재의 칩과 비교해 3배 높은 집적도와 50% 향상된 에너지 효율성을 보이게 된다. 업계에서는 이를 통해 더 우수한 아이폰과 아이패드, 맥이 등장하는 것은 물론, AR 헤드셋 등의 범주에서 요구되는 성능이 구현될 수 있을 것으로 관측하고 있다. ciokr@idg.co.kr', '2020-08-21 14:13', 0, 0);
insert into TB_BOARD (BOARD_NO, USER_CODE, BOARD_TITLE, BOARD_CONTENTS, BOARD_DATE, BOARD_HITS, BOARD_RATING)
values ('B' || LPAD(BOARD_SEQ.NEXTVAL, 6, 0), 'USER000002', '블로그 CEO 취임 9년·시총 2조 돌파··· 팀 쿡 독트린을 돌이켜본다', '24일을 기해 팀 쿡 애플 최고경영자(CEO)가 회사를 이끈 지 9년이 됐다. 그가 회사를 이끄는 동안 애플의 시가총액은 4,000억 달러에서 2조 달러로 증가했다. 팀 쿡의 원칙2009년 스티브 잡스 당시 애플 최고경영자(CEO)가 췌장암 치료를 위해 장기 휴직을 하게 됐을 때, 쿡은 그해 1분기 컨퍼런스콜을 주재했다.쿡은 당시 쿡의 원칙(The Cook Doctrine)으로 알려진 일련의 성명서를 통해 그가 앞으로 회사를 어떻게 이끌지 상세하게 설명했다. 그가 잡스의 휴직으로 최고경영자 자리에 오른 직후였다. 애플이 지금껏 쿡의 성명서 내용을 얼마나 충실하게 지켰는지 살펴본다.우리는 최고의 제품을 만들기 위해 지구상에 존재하며, 그 목적 의식은 변함이 없다고 생각한다.우리는 끊임없이 혁신에 초점을 맞추고 있다.우리는 복잡함이 아니라 단순함을 믿는다.우리는 제품에 들어간 1차 기술을 소유하고 제어해야 하며, 상당한 기여를 할 수 있는 시장에만 참여해야 한다고 생각한다.우리는 정말 중요하고 의미 있는 몇 가지 일에 제대로 집중하기 위해서라면 수천 개의 프로젝트도 거절할 수 있다고 생각한다.우리는 우리 내부의 깊은 협력과 교류를 통해 다른 이가 시도할 수 없는 방식으로 혁신할 수 있다고 생각한다.그리고 터놓고 말해 우리는 회사 내의 모든 부문에서 최고가 아닌 것은 용납하지 않는다. 그러면서도 우리는 틀렸을 때 인정할 수 있는 정직함과 변화할 수 있는 용기가 있다.그리고 어떤 직무에 누가 속해 있든, 위와 같은 가치관이 이 회사에 잘 자리 잡혀 있으므로 애플은 매우 잘해낼 것이라고 생각한다
애플 실리콘은 쿡 원칙의 정수다.쿡이 성명서를 발표한 이래, 애플은 산전수전을 겪으며 돌파구를 만들어왔다. 아이패드를 출시해 넷북 산업을 집어삼켰고, 범주를 재정의하는 애플워치를 내놓았다. 또 다양한 운영체제를 관리하고 모바일 사업을 밀어붙였으며 새로운 서비스 시장에 진입했다. 이 시기 임원진들도 확 바뀌었다. 애플이 성장함에 따라 경쟁의 정도, 애플을 향한 비판, 그리고 규제 감독이 심해졌다.무역 파트너십이 해체되고, 기후 변화와 코로나 사태가 근거없는 소문을 배경으로 확산되는 가운데, 애플의 사업 운영은 전 세계의 자국 우선주의로 인해 타격을 받았다. 우여곡절의 연속이었다. 심지어 애플은 국제 법인세 조율 문제에 부닥치기도 했다. 그럼에도 애플은 최근 사회적으로 부각된 긍정적 가치를 기업 브랜드에 녹여내고 있다는 점에서 상당히 선전하고 있는 것 같아 보인다. 각종 난항에도 불구하고 애플의 수익성은 매우 높다. 그 이유 중 하나는 애플이 자사의 원천기술 관리와 실리콘 팀의 제품 개발을 직접 관장하는 데 중점을 두기 때문이다. 애플 실리콘은 현재 ‘쿡의 원칙’이 낳은 가장 뚜렷한 결과물로 자리매김하고 있다.애플은 PA 세미를 전격 인수한 이후 자사의 컴퓨터를 독자적으로 구동시킬 수 있는 칩을 꾸준히 만들어왔다. 터치 ID, T2 칩, 그래픽 프로세서, 모뎀 그리고 현재의 애플 실리콘이 대표적인 사례다. 애플이 만든 칩은 전력과 성능 면에서 경쟁사보다 현격히 앞서 있다. 또 애플은 맥에도 애플 실리콘을 탑재해 기술적 우위를 달성하려 하고 있다. 보급형 PC에 5nm 칩 그리고 향후 3nm 칩이 탑재되는 건 업계 최초의 사례가 될 것이다.팀 내 상호 교류 또한 애플은 팀 간의 교류에 있어서 순항 중인 게 분명하다. 아이패드용 앱이 맥에서 사용되도록 하는 걸 목표로 하는 카탈리스트 프로젝트가 앞으로 애플 생태계에서 어떻게 진행될지 상상해보라. 또한 맥을 아이패드의 단짝으로 만들기 위한 작업, 애플워치와 아이폰의 조합이 개인의 디지털 헬스케어에 가지는 잠재력을 생각해보라. 의문스러운 행보도 있었다. 애플은 왜 오랫동안 맥을 그저 내버려두는 듯한 제스처를 취했을까? 아이패드가 맥의 시스템들을 대체할 것이라고 생각해서? 아니면 애플의 초점이 그저 돈을 버는 데 있기 때문에 그런 걸까? 배터리 스로틀링은 꼭 필요한 것이었나? 애플의 다음 행보를 주목해보자. 아직 확실치는 않지만 애플이 전 제품군에서 일련의 행보를 반복적으로 취할 거라는 점을 예상할 수 있다. 애플 실리콘 맥과 관련해 흥미로운 것들도 많다. 디지털 헬스케어에 대한 애플의 계획이나 혹은 애플 글래스처럼 추측이 무성한 제품이나 애플 자동차를 둘러싼 끊임없는 루머들은 여전히 실현되지 않은 상태다. 여러 개의 특허와 충분한 R&D 예산에도 불구하고 말이다.아마도 쿡의 애플 경영이 10년 차에 접어들고 애플 시가총액의 단위가 다시 바뀔 때쯤 이런 계획들 중 일부가 실현되는 걸 보게 될 것이다. 쿡은 우리는 이 사업을 소프트웨어 플랫폼 사업으로서 보려고 한다라고 말한 바 있다. 지난 2018년 팀 쿡은 우리는 2020년대의 궤도를 벗어난 것들을 개발하고 있다라고 말했었다.  애플은 이미 2030년을 위한 계획을 논의하고 있는 중인지도 모른다.*조니 에반스는 프리랜서 작가로 1999년부터 애플과 제반 기술에 대해 주로 글을 쓰고 있다. ciokr@idg.co.kr
', '2020-08-21 14:13', 0, 0);

insert into TB_MARK (BOARD_NO, USER_CODE, MARK_RATING)
values ('B000004', 'USER000003', 1);

insert into TB_REPLY (BOARD_NO, USER_CODE, USER_REPLY_NO, USER_REPLY, REPLY_DATE)
values ('B000005', 'USER000003', 1, '부부 대상 대박...', '2015-12-31 14:15');
insert into TB_REPLY (BOARD_NO, USER_CODE, USER_REPLY_NO, USER_REPLY, REPLY_DATE)
values ('B000006', 'USER000003', 1, '외모가 중요하긴 하지..', '2015-12-31 14:17');

insert into TB_SCHE (SCHE_NO, USER_CODE, SCHE_TITLE , SCHE_CONTENTS , SCHE_DATE , SCHE_HITS)
values ('B' || LPAD(SCHE_SEQ.NEXTVAL, 6, 0), 'USER000002', '[공지]개발인 게시판수칙','1, 서로에 대한 비방은 금지입니다 2, 서로코드공유는 이메일로 해주세요 ', '2020-08-21 14:13', 0);
insert into TB_SCHE (SCHE_NO, USER_CODE, SCHE_TITLE , SCHE_CONTENTS , SCHE_DATE , SCHE_HITS)
values ('B' || LPAD(SCHE_SEQ.NEXTVAL, 6, 0), 'USER000002', '[공지]2020년 데이터 안전활용 제3차 기본교육 안내','개 요 교육명 : 데이터 안전활용 제3차 기본교육 일   시 : 2020. 9. 8.(화), 10:00 - 18:00(7시간) 장   소 : 한국인터넷진흥원 가락청사 3층 대강당 대   상 : 안전한 데이터 활용에 관심있는 일반인, 실무자 50명 교육신청 및 안내 신청기간 : 8.11.(화) 14:00 -  9.1.(화) 17:00 신청방법 : 온라인 교육신청 링크*를 통해 신청 관련 정보를 기입하여 제출신청 링크(http://naver.me/xrhV4JD3)수강안내 : 9.2.(수) ※ 이메일 및 문자를통해 개별 안내 예정교육안내 및 문의 : 교육운영사무국 (070-4849-5227 / support@cmcom.kr) 코로나19 확산 방지를 위한 요청사항코로나19 관련 환자가 급증한 지역소재 방문으로 이상 증상 확인 시 교육 변경 또는 취소 요청 부탁드립니다.코로나19 관련 증상 검사 진행중이거나, 자가 격리 중인 분이 있다면 교육 취소 및 담당자에게 연락 부탁드립니다.교육 등록 시 비대면 발열체크를 진행하며, 교육장에서는 마스크 착용 부탁드립니다.지정 좌석제운영으로 반드시 지정된 좌석에 착석을 부탁드립니다. ', '2020-08-21 14:13', 0);
insert into TB_SCHE (SCHE_NO, USER_CODE, SCHE_TITLE , SCHE_CONTENTS , SCHE_DATE , SCHE_HITS)
values ('B' || LPAD(SCHE_SEQ.NEXTVAL, 6, 0), 'USER000002', '[공지]코로나 관련 모임 관련 공지사항','코로나 2단계 지속관련 모임 안내사항입니다 1, 모임은 10명이하로 모여주시길 바랍니다  2, 마스크는 실내에서도 써주시길 바랍니다 3, 손소독제 필참 해주시길 바랍니다', '2020-08-21 14:13', 0);
insert into TB_SCHE (SCHE_NO, USER_CODE, SCHE_TITLE , SCHE_CONTENTS , SCHE_DATE , SCHE_HITS)
values ('B' || LPAD(SCHE_SEQ.NEXTVAL, 6, 0), 'USER000002', '[공지]이것만은 꼭! 지켜요~ 맞춤법 20선','코로나 2단계 지속관련 모임 안내사항입니다 1, 모임은 10명이하로 모여주시길 바랍니다  2, 마스크는 실내에서도 써주시길 바랍니다 3, 손소독제 필참 해주시길 바랍니다', '2020-08-21 14:13', 0);
commit;
